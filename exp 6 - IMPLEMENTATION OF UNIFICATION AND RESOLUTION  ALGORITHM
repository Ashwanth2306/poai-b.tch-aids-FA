def unify(var1, var2, subst):
&quot;&quot;&quot;Unify two variables or terms with substitution.&quot;&quot;&quot;
if subst is None:
return None
elif var1 == var2:
return subst
elif isinstance(var1, str) and var1.islower():
return unify_var(var1, var2, subst)
elif isinstance(var2, str) and var2.islower():
return unify_var(var2, var1, subst)
elif isinstance(var1, list) and isinstance(var2, list) and len(var1) == len(var2):
return unify(var1[1:], var2[1:], unify(var1[0], var2[0], subst))
else:
return None

def unify_var(var, x, subst):
&quot;&quot;&quot;Handle unification for variables.&quot;&quot;&quot;
if var in subst:
return unify(subst[var], x, subst)
elif x in subst:
return unify(var, subst[x], subst)
elif occurs_check(var, x, subst):
return None
else:
subst[var] = x
return subst

def occurs_check(var, x, subst):
&quot;&quot;&quot;Check for cyclic dependencies in substitution.&quot;&quot;&quot;
if var == x:
return True
elif isinstance(x, list):
return any(occurs_check(var, xi, subst) for xi in x)
elif x in subst:
return occurs_check(var, subst[x], subst)
return False

def resolution(kb, query):
&quot;&quot;&quot;Apply resolution algorithm to check satisfiability.&quot;&quot;&quot;
clauses = kb + [negate(query)]
while True:
new_clauses = []
for i, ci in enumerate(clauses):
for j, cj in enumerate(clauses):
if i &gt;= j:
continue

resolvents = resolve(ci, cj)
if [] in resolvents:
return True # Query is satisfiable
for res in resolvents:
if res not in new_clauses:
new_clauses.append(res)
if all(new in clauses for new in new_clauses):
return False # Query is not satisfiable
clauses.extend(new_clauses)

def negate(literal):
&quot;&quot;&quot;Negate a literal or a list of literals.&quot;&quot;&quot;
if isinstance(literal, list):
return [negate(lit) for lit in literal]
if literal.startswith(&quot;~&quot;):
return literal[1:]
else:
return f&quot;~{literal}&quot;

def resolve(clause1, clause2):
&quot;&quot;&quot;Resolve two clauses to find resolvents.&quot;&quot;&quot;
resolvents = []
for lit1 in clause1:
for lit2 in clause2:
if lit1 == negate(lit2):
new_clause = list(set(clause1 + clause2))
new_clause.remove(lit1)
new_clause.remove(lit2)
if new_clause not in resolvents:
resolvents.append(new_clause)
return resolvents


if __name__ == &quot;__main__&quot;:
knowledge_base = [
[&quot;~P&quot;, &quot;Q&quot;],
[&quot;P&quot;],
[&quot;~Q&quot;, &quot;R&quot;],
[&quot;~R&quot;]
]
query = [&quot;R&quot;]
print(&quot;Knowledge Base:&quot;, knowledge_base)
print(&quot;Query:&quot;, query)
result = resolution(knowledge_base, query)
if result:
print(&quot;The query is satisfiable.&quot;)
else:
print(&quot;The query is not satisfiable.&quot;)
